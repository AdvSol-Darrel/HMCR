-- =============================================
-- Author:		Ben Driver
-- Create date: 2019-11-27
-- Updates: 
--	2020-01-02: v0.13.2 revisions in support of sprint 4.
--	2019-12-12: v0.13 Updates in support of sprint 3 & 4. 
--	2019-11-27: v0.12 Updates in support of sprint 2 & 3.
-- 
-- Description:	T-SQL generated Triggers and History Tables.  Includes sequences for History tables.  All dates set to UTC time, to be consistent throughout the database.
-- =============================================

USE HMR_DEV; -- uncomment appropriate instance
--USE HMR_TST;
--USE HMR_UAT;
--USE HMR_PRD;
GO

IF OBJECT_ID ('HMR_ACT_CODE_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_ACT_CODE_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_ACTIVITY_CODE_HIST', 'U') IS NOT NULL   
  drop table HMR_ACTIVITY_CODE_HIST
go

IF OBJECT_ID ('HMR_ACTIVITY_CODE_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_ACTIVITY_CODE_H_ID_SEQ
go

IF OBJECT_ID ('HMR_CODE_LKUP_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_CODE_LKUP_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_CODE_LOOKUP_HIST', 'U') IS NOT NULL   
  drop table HMR_CODE_LOOKUP_HIST
go

IF OBJECT_ID ('HMR_CODE_LOOKUP_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_CODE_LOOKUP_H_ID_SEQ
go

IF OBJECT_ID ('HMR_CNRT_TRM_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_CNRT_TRM_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_CONTRACT_TERM_HIST', 'U') IS NOT NULL   
  drop table HMR_CONTRACT_TERM_HIST
go

IF OBJECT_ID ('HMR_CONTRACT_TERM_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_CONTRACT_TERM_H_ID_SEQ
go

IF OBJECT_ID ('HMR_LOC_CODE_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_LOC_CODE_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_LOCATION_CODE_HIST', 'U') IS NOT NULL   
  drop table HMR_LOCATION_CODE_HIST
go

IF OBJECT_ID ('HMR_LOCATION_CODE_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_LOCATION_CODE_H_ID_SEQ
go

IF OBJECT_ID ('HMR_PRTY_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_PRTY_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_PARTY_HIST', 'U') IS NOT NULL   
  drop table HMR_PARTY_HIST
go

IF OBJECT_ID ('HMR_PARTY_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_PARTY_H_ID_SEQ
go

IF OBJECT_ID ('HMR_PERM_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_PERM_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_PERMISSION_HIST', 'U') IS NOT NULL   
  drop table HMR_PERMISSION_HIST
go

IF OBJECT_ID ('HMR_PERMISSION_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_PERMISSION_H_ID_SEQ
go

IF OBJECT_ID ('HMR_RCKFL_RPT_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_RCKFL_RPT_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_ROCKFALL_REPORT_HIST', 'U') IS NOT NULL   
  drop table HMR_ROCKFALL_REPORT_HIST
go

IF OBJECT_ID ('HMR_ROCKFALL_REPORT_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_ROCKFALL_REPORT_H_ID_SEQ
go

IF OBJECT_ID ('HMR_RL_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_RL_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_ROLE_HIST', 'U') IS NOT NULL   
  drop table HMR_ROLE_HIST
go

IF OBJECT_ID ('HMR_ROLE_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_ROLE_H_ID_SEQ
go

IF OBJECT_ID ('HMR_RL_PERM_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_RL_PERM_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_ROLE_PERMISSION_HIST', 'U') IS NOT NULL   
  drop table HMR_ROLE_PERMISSION_HIST
go

IF OBJECT_ID ('HMR_ROLE_PERMISSION_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_ROLE_PERMISSION_H_ID_SEQ
go

IF OBJECT_ID ('HMR_SRV_ARA_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_SRV_ARA_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_SERVICE_AREA_HIST', 'U') IS NOT NULL   
  drop table HMR_SERVICE_AREA_HIST
go

IF OBJECT_ID ('HMR_SERVICE_AREA_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_SERVICE_AREA_H_ID_SEQ
go

IF OBJECT_ID ('HMR_SRV_ARA_USR_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_SRV_ARA_USR_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_SERVICE_AREA_USER_HIST', 'U') IS NOT NULL   
  drop table HMR_SERVICE_AREA_USER_HIST
go

IF OBJECT_ID ('HMR_SERVICE_AREA_USER_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_SERVICE_AREA_USER_H_ID_SEQ
go

IF OBJECT_ID ('HMR_STR_ELMT_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_STR_ELMT_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_STREAM_ELEMENT_HIST', 'U') IS NOT NULL   
  drop table HMR_STREAM_ELEMENT_HIST
go

IF OBJECT_ID ('HMR_STREAM_ELEMENT_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_STREAM_ELEMENT_H_ID_SEQ
go

IF OBJECT_ID ('HMR_SUBM_RW_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_SUBM_RW_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_SUBMISSION_ROW_HIST', 'U') IS NOT NULL   
  drop table HMR_SUBMISSION_ROW_HIST
go

IF OBJECT_ID ('HMR_SUBMISSION_ROW_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_SUBMISSION_ROW_H_ID_SEQ
go

IF OBJECT_ID ('HMR_SUBM_STR_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_SUBM_STR_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_SUBMISSION_STREAM_HIST', 'U') IS NOT NULL   
  drop table HMR_SUBMISSION_STREAM_HIST
go

IF OBJECT_ID ('HMR_SUBMISSION_STREAM_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_SUBMISSION_STREAM_H_ID_SEQ
go

IF OBJECT_ID ('HMR_SYS_USR_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_SYS_USR_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_SYSTEM_USER_HIST', 'U') IS NOT NULL   
  drop table HMR_SYSTEM_USER_HIST
go

IF OBJECT_ID ('HMR_SYSTEM_USER_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_SYSTEM_USER_H_ID_SEQ
go

IF OBJECT_ID ('HMR_USR_RL_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_USR_RL_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_USER_ROLE_HIST', 'U') IS NOT NULL   
  drop table HMR_USER_ROLE_HIST
go

IF OBJECT_ID ('HMR_USER_ROLE_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_USER_ROLE_H_ID_SEQ
go

IF OBJECT_ID ('HMR_WLDLF_RPT_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_WLDLF_RPT_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_WILDLIFE_REPORT_HIST', 'U') IS NOT NULL   
  drop table HMR_WILDLIFE_REPORT_HIST
go

IF OBJECT_ID ('HMR_WILDLIFE_REPORT_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_WILDLIFE_REPORT_H_ID_SEQ
go

IF OBJECT_ID ('HMR_WRK_RPT_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger HMR_WRK_RPT_A_S_IUD_TR
go

IF OBJECT_ID ('HMR_WORK_REPORT_HIST', 'U') IS NOT NULL   
  drop table HMR_WORK_REPORT_HIST
go

IF OBJECT_ID ('HMR_WORK_REPORT_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence HMR_WORK_REPORT_H_ID_SEQ
go

CREATE SEQUENCE [dbo].[HMR_ACTIVITY_CODE_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_ACTIVITY_CODE_HIST](
  ACTIVITY_CODE_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_ACTIVITY_CODE_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ACTIVITY_CODE_ID] numeric NOT NULL, [ACTIVITY_NUMBER] varchar(6) NOT NULL, [ACTIVITY_NAME] varchar(150) NOT NULL, [UNIT_OF_MEASURE] varchar(12) NOT NULL, [MAINTENANCE_TYPE] varchar(12) NOT NULL, [LOCATION_CODE_ID] numeric NOT NULL, [POINT_LINE_FEATURE] varchar(12) NULL, [ACTIVITY_APPLICATION] varchar(30) NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_ACTIVITY_CODE_HIST ADD CONSTRAINT HMR_ACT_C_H_PK PRIMARY KEY CLUSTERED (ACTIVITY_CODE_HIST_ID);  
ALTER TABLE HMR_ACTIVITY_CODE_HIST ADD CONSTRAINT HMR_ACT_C_H_UK UNIQUE (ACTIVITY_CODE_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_CODE_LOOKUP_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_CODE_LOOKUP_HIST](
  CODE_LOOKUP_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_CODE_LOOKUP_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [CODE_LOOKUP_ID] numeric NOT NULL, [CODE_SET] varchar(20) NULL, [CODE_NAME] varchar(20) NULL, [CODE_VALUE_TEXT] varchar(20) NULL, [CODE_VALUE_NUM] numeric NULL, [CODE_VALUE_FORMAT] varchar(12) NULL, [DISPLAY_ORDER] numeric NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_CODE_LOOKUP_HIST ADD CONSTRAINT HMR_CODE__H_PK PRIMARY KEY CLUSTERED (CODE_LOOKUP_HIST_ID);  
ALTER TABLE HMR_CODE_LOOKUP_HIST ADD CONSTRAINT HMR_CODE__H_UK UNIQUE (CODE_LOOKUP_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_CONTRACT_TERM_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_CONTRACT_TERM_HIST](
  CONTRACT_TERM_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_CONTRACT_TERM_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [CONTRACT_TERM_ID] numeric NOT NULL, [CONTRACT_NAME] varchar(150) NOT NULL, [PARTY_ID] numeric NOT NULL, [SERVICE_AREA_NUMBER] numeric NOT NULL, [START_DATE] datetime NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_CONTRACT_TERM_HIST ADD CONSTRAINT HMR_CNRT__H_PK PRIMARY KEY CLUSTERED (CONTRACT_TERM_HIST_ID);  
ALTER TABLE HMR_CONTRACT_TERM_HIST ADD CONSTRAINT HMR_CNRT__H_UK UNIQUE (CONTRACT_TERM_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_LOCATION_CODE_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_LOCATION_CODE_HIST](
  LOCATION_CODE_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_LOCATION_CODE_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [LOCATION_CODE_ID] numeric NOT NULL, [LOCATION_CODE] varchar(1) NOT NULL, [REQUIRED_LOCATION_DETAILS] varchar(150) NULL, [ADDITIONAL_INFO] varchar(30) NULL, [REPORTING_FREQUENCY] varchar(30) NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_LOCATION_CODE_HIST ADD CONSTRAINT HMR_LOC_C_H_PK PRIMARY KEY CLUSTERED (LOCATION_CODE_HIST_ID);  
ALTER TABLE HMR_LOCATION_CODE_HIST ADD CONSTRAINT HMR_LOC_C_H_UK UNIQUE (LOCATION_CODE_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_PARTY_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_PARTY_HIST](
  PARTY_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_PARTY_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [PARTY_ID] numeric NOT NULL, [BUSINESS_GUID] uniqueidentifier NULL, [BUSINESS_LEGAL_NAME] varchar(200) NULL, [DISPLAY_NAME] varchar(30) NULL, [EMAIL] varchar(100) NULL, [TELEPHONE] varchar(20) NULL, [BUSINESS_NUMBER] numeric NULL, [PARTY_TYPE] varchar(32) NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_PARTY_HIST ADD CONSTRAINT HMR_PRTY_H_PK PRIMARY KEY CLUSTERED (PARTY_HIST_ID);  
ALTER TABLE HMR_PARTY_HIST ADD CONSTRAINT HMR_PRTY_H_UK UNIQUE (PARTY_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_PERMISSION_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_PERMISSION_HIST](
  PERMISSION_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_PERMISSION_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [PERMISSION_ID] numeric NOT NULL, [NAME] varchar(30) NOT NULL, [DESCRIPTION] varchar(150) NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_PERMISSION_HIST ADD CONSTRAINT HMR_PERM_H_PK PRIMARY KEY CLUSTERED (PERMISSION_HIST_ID);  
ALTER TABLE HMR_PERMISSION_HIST ADD CONSTRAINT HMR_PERM_H_UK UNIQUE (PERMISSION_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_ROCKFALL_REPORT_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_ROCKFALL_REPORT_HIST](
  ROCKFALL_REPORT_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_ROCKFALL_REPORT_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ROCKFALL_REPORT_ID] numeric NOT NULL, [SUBMISSION_OBJECT_ID] numeric NOT NULL, [VALIDATION_STATUS_ID] numeric NULL, [MAJOR_INCIDENT_NUMBER] varchar(12) NULL, [ESTIMATED_ROCKFALL_DATE] date NULL, [ESTIMATED_ROCKFALL_TIME] time NULL, [START_LATITUDE] numeric NULL, [START_LONGITUDE] numeric NULL, [END_LATITUDE] numeric NULL, [END_LONGITUDE] numeric NULL, [HIGHWAY_UNIQUE_NUMBER] varchar(16) NULL, [HIGHWAY_UNIQUE_NAME] varchar(255) NULL, [LANDMARK] varchar(8) NULL, [LAND_MARK_NAME] varchar(255) NULL, [START_OFFSET] numeric NULL, [END_OFFSET] numeric NULL, [DIRECTION_FROM_LANDMARK] varchar(1) NULL, [LOCATION_DESCRIPTION] varchar(4000) NULL, [DITCH_VOLUME] varchar(30) NULL, [TRAVELLED_LANES_VOLUME] varchar(30) NULL, [OTHER_VOLUME] numeric NULL, [HEAVY_PRECIP] varchar(1) NULL, [FREEZE_THAW] varchar(1) NULL, [DITCH_SNOW_ICE] varchar(1) NULL, [VEHICLE_DAMAGE] varchar(1) NULL, [COMMENTS] varchar(4000) NULL, [REPORTER_NAME] varchar(150) NULL, [MC_PHONE_NUMBER] varchar(12) NULL, [REPORT_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_ROCKFALL_REPORT_HIST ADD CONSTRAINT HMR_RCKFL_H_PK PRIMARY KEY CLUSTERED (ROCKFALL_REPORT_HIST_ID);  
ALTER TABLE HMR_ROCKFALL_REPORT_HIST ADD CONSTRAINT HMR_RCKFL_H_UK UNIQUE (ROCKFALL_REPORT_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_ROLE_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_ROLE_HIST](
  ROLE_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_ROLE_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ROLE_ID] numeric NOT NULL, [NAME] varchar(30) NOT NULL, [DESCRIPTION] varchar(150) NULL, [IS_INTERNAL] varchar(1) NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_ROLE_HIST ADD CONSTRAINT HMR_RL_H_PK PRIMARY KEY CLUSTERED (ROLE_HIST_ID);  
ALTER TABLE HMR_ROLE_HIST ADD CONSTRAINT HMR_RL_H_UK UNIQUE (ROLE_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_ROLE_PERMISSION_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_ROLE_PERMISSION_HIST](
  ROLE_PERMISSION_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_ROLE_PERMISSION_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ROLE_PERMISSION_ID] numeric NOT NULL, [ROLE_ID] numeric NOT NULL, [PERMISSION_ID] numeric NOT NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_ROLE_PERMISSION_HIST ADD CONSTRAINT HMR_RL_PE_H_PK PRIMARY KEY CLUSTERED (ROLE_PERMISSION_HIST_ID);  
ALTER TABLE HMR_ROLE_PERMISSION_HIST ADD CONSTRAINT HMR_RL_PE_H_UK UNIQUE (ROLE_PERMISSION_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_SERVICE_AREA_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_SERVICE_AREA_HIST](
  SERVICE_AREA_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_SERVICE_AREA_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [SERVICE_AREA_ID] numeric NOT NULL, [SERVICE_AREA_NUMBER] numeric NOT NULL, [SERVICE_AREA_NAME] varchar(60) NOT NULL, [DISTRICT_NUMBER] numeric NOT NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_SERVICE_AREA_HIST ADD CONSTRAINT HMR_SRV_A_H_PK PRIMARY KEY CLUSTERED (SERVICE_AREA_HIST_ID);  
ALTER TABLE HMR_SERVICE_AREA_HIST ADD CONSTRAINT HMR_SRV_A_H_UK UNIQUE (SERVICE_AREA_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_SERVICE_AREA_USER_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_SERVICE_AREA_USER_HIST](
  SERVICE_AREA_USER_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_SERVICE_AREA_USER_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [SERVICE_AREA_USER_ID] numeric NOT NULL, [SERVICE_AREA_NUMBER] numeric NOT NULL, [SYSTEM_USER_ID] numeric NOT NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_SERVICE_AREA_USER_HIST ADD CONSTRAINT HMR_SRV_A_U_H_PK PRIMARY KEY CLUSTERED (SERVICE_AREA_USER_HIST_ID);  
ALTER TABLE HMR_SERVICE_AREA_USER_HIST ADD CONSTRAINT HMR_SRV_A_U_H_UK UNIQUE (SERVICE_AREA_USER_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_STREAM_ELEMENT_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_STREAM_ELEMENT_HIST](
  STREAM_ELEMENT_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_STREAM_ELEMENT_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [STREAM_ELEMENT_ID] numeric NOT NULL, [SUBMISSION_STREAM_ID] numeric NOT NULL, [ELEMENT_NAME] varchar(30) NULL, [ELEMENT_TYPE] varchar(30) NULL, [STAGING_COLUMN_NAME] varchar(30) NULL, [IS_REQUIRED] varchar(1) NULL, [MAX_LENGTH] numeric NULL, [MIN_LENGTH] numeric NULL, [MAX_VALUE] numeric NULL, [MIN_VALUE] numeric NULL, [MAX_DATE] datetime NULL, [MIN_DATE] datetime NULL, [REG_EXP] varchar(4000) NULL, [CODE_SET] varchar(20) NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_STREAM_ELEMENT_HIST ADD CONSTRAINT HMR_STR_E_H_PK PRIMARY KEY CLUSTERED (STREAM_ELEMENT_HIST_ID);  
ALTER TABLE HMR_STREAM_ELEMENT_HIST ADD CONSTRAINT HMR_STR_E_H_UK UNIQUE (STREAM_ELEMENT_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_SUBMISSION_ROW_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_SUBMISSION_ROW_HIST](
  SUBMISSION_ROW_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_SUBMISSION_ROW_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ROW_ID] numeric NOT NULL, [SUBMISSION_OBJECT_ID] numeric NOT NULL, [ROW_STATUS_ID] numeric NULL, [RECORD_NUMBER] varchar(8) NULL, [ROW_VALUE] varchar(4000) NULL, [ROW_HASH] varchar(256) NULL, [ERROR_DETAIL] varchar(4000) NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_SUBMISSION_ROW_HIST ADD CONSTRAINT HMR_SUBM__H_PK PRIMARY KEY CLUSTERED (SUBMISSION_ROW_HIST_ID);  
ALTER TABLE HMR_SUBMISSION_ROW_HIST ADD CONSTRAINT HMR_SUBM__H_UK UNIQUE (SUBMISSION_ROW_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_SUBMISSION_STREAM_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_SUBMISSION_STREAM_HIST](
  SUBMISSION_STREAM_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_SUBMISSION_STREAM_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [SUBMISSION_STREAM_ID] numeric NOT NULL, [STREAM_NAME] varchar(30) NULL, [END_DATE] datetime NULL, [FILE_SIZE_LIMIT] numeric NULL, [STAGING_TABLE_NAME] varchar(30) NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_SUBMISSION_STREAM_HIST ADD CONSTRAINT HMR_SUBM_U_H_PK PRIMARY KEY CLUSTERED (SUBMISSION_STREAM_HIST_ID);  
ALTER TABLE HMR_SUBMISSION_STREAM_HIST ADD CONSTRAINT HMR_SUBM_U_H_UK UNIQUE (SUBMISSION_STREAM_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_SYSTEM_USER_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_SYSTEM_USER_HIST](
  SYSTEM_USER_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_SYSTEM_USER_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [SYSTEM_USER_ID] numeric NOT NULL, [PARTY_ID] numeric NULL, [USER_GUID] uniqueidentifier NULL, [USERNAME] varchar(32) NOT NULL, [USER_DIRECTORY] varchar(30) NULL, [USER_TYPE] varchar(30) NULL, [FIRST_NAME] varchar(150) NULL, [LAST_NAME] varchar(150) NULL, [EMAIL] varchar(100) NULL, [BUSINESS_GUID] uniqueidentifier NULL, [BUSINESS_LEGAL_NAME] varchar(200) NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_SYSTEM_USER_HIST ADD CONSTRAINT HMR_SYS_U_H_PK PRIMARY KEY CLUSTERED (SYSTEM_USER_HIST_ID);  
ALTER TABLE HMR_SYSTEM_USER_HIST ADD CONSTRAINT HMR_SYS_U_H_UK UNIQUE (SYSTEM_USER_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_USER_ROLE_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_USER_ROLE_HIST](
  USER_ROLE_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_USER_ROLE_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [USER_ROLE_ID] numeric NOT NULL, [ROLE_ID] numeric NOT NULL, [SYSTEM_USER_ID] numeric NOT NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_USER_ROLE_HIST ADD CONSTRAINT HMR_USR_R_H_PK PRIMARY KEY CLUSTERED (USER_ROLE_HIST_ID);  
ALTER TABLE HMR_USER_ROLE_HIST ADD CONSTRAINT HMR_USR_R_H_UK UNIQUE (USER_ROLE_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_WILDLIFE_REPORT_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_WILDLIFE_REPORT_HIST](
  WILDLIFE_REPORT_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_WILDLIFE_REPORT_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [WILDLIFE_RECORD_ID] numeric NOT NULL, [SUBMISSION_OBJECT_ID] numeric NOT NULL, [VALIDATION_STATUS_ID] numeric NULL, [RECORD_TYPE] varchar(1) NULL, [SERVICE_AREA] numeric NOT NULL, [ACCIDENT_DATE] datetime NULL, [TIME_OF_KILL] varchar(1) NULL, [LATITUDE] numeric NULL, [LONGITUDE] numeric NULL, [HIGHWAY_UNIQUE_NUMBER] varchar(16) NULL, [LANDMARK] varchar(8) NULL, [START_OFFSET] numeric NULL, [NEAREST_TOWN] varchar(150) NULL, [WILDLIFE_SIGN] varchar(1) NULL, [QUANTITY] numeric NULL, [SPECIES] numeric NULL, [SEX] varchar(1) NULL, [AGE] varchar(1) NULL, [COMMENT] varchar(1024) NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_WILDLIFE_REPORT_HIST ADD CONSTRAINT HMR_WLDLF_H_PK PRIMARY KEY CLUSTERED (WILDLIFE_REPORT_HIST_ID);  
ALTER TABLE HMR_WILDLIFE_REPORT_HIST ADD CONSTRAINT HMR_WLDLF_H_UK UNIQUE (WILDLIFE_REPORT_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[HMR_WORK_REPORT_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[HMR_WORK_REPORT_HIST](
  WORK_REPORT_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [HMR_WORK_REPORT_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [WORK_REPORT_ID] numeric NOT NULL, [SUBMISSION_OBJECT_ID] numeric NOT NULL, [VALIDATION_STATUS_ID] numeric NULL, [RECORD_TYPE] varchar(1) NULL, [SERVICE_AREA] numeric NOT NULL, [RECORD_NUMBER] varchar(8) NULL, [TASK_NUMBER] varchar(6) NULL, [ACTIVITY_NUMBER] varchar(6) NULL, [START_DATE] date NULL, [END_DATE] date NULL, [ACCOMPLISHMENT] numeric NULL, [UNIT_OF_MEASURE] varchar(12) NULL, [POSTED_DATE] date NULL, [HIGHWAY_UNIQUE] varchar(16) NULL, [LANDMARK] varchar(8) NULL, [START_OFFSET] numeric NULL, [END_OFFSET] numeric NULL, [START_LATITUDE] numeric NULL, [START_LONGITUDE] numeric NULL, [END_LATITUDE] numeric NULL, [END_LONGITUDE] numeric NULL, [STRUCTURE_NUMBER] varchar(5) NULL, [SITE_NUMBER] varchar(8) NULL, [VALUE_OF_WORK ] numeric NULL, [COMMENTS] varchar(1024) NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE HMR_WORK_REPORT_HIST ADD CONSTRAINT HMR_WRK_R_H_PK PRIMARY KEY CLUSTERED (WORK_REPORT_HIST_ID);  
ALTER TABLE HMR_WORK_REPORT_HIST ADD CONSTRAINT HMR_WRK_R_H_UK UNIQUE (WORK_REPORT_HIST_ID,END_DATE_HIST)
go

CREATE TRIGGER HMR_ACT_CODE_A_S_IUD_TR ON HMR_ACTIVITY_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_ACTIVITY_CODE_HIST set END_DATE_HIST = @curr_date where ACTIVITY_CODE_ID in (select ACTIVITY_CODE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_ACTIVITY_CODE_HIST ([ACTIVITY_CODE_ID], [ACTIVITY_NUMBER], [ACTIVITY_NAME], [UNIT_OF_MEASURE], [MAINTENANCE_TYPE], [LOCATION_CODE_ID], [POINT_LINE_FEATURE], [ACTIVITY_APPLICATION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], ACTIVITY_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ACTIVITY_CODE_ID], [ACTIVITY_NUMBER], [ACTIVITY_NAME], [UNIT_OF_MEASURE], [MAINTENANCE_TYPE], [LOCATION_CODE_ID], [POINT_LINE_FEATURE], [ACTIVITY_APPLICATION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_ACTIVITY_CODE_H_ID_SEQ]) as [ACTIVITY_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_CNRT_TRM_A_S_IUD_TR ON HMR_CONTRACT_TERM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_CONTRACT_TERM_HIST set END_DATE_HIST = @curr_date where CONTRACT_TERM_ID in (select CONTRACT_TERM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_CONTRACT_TERM_HIST ([CONTRACT_TERM_ID], [CONTRACT_NAME], [PARTY_ID], [SERVICE_AREA_NUMBER], [START_DATE], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], CONTRACT_TERM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CONTRACT_TERM_ID], [CONTRACT_NAME], [PARTY_ID], [SERVICE_AREA_NUMBER], [START_DATE], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_CONTRACT_TERM_H_ID_SEQ]) as [CONTRACT_TERM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_CODE_LKUP_A_S_IUD_TR ON HMR_CODE_LOOKUP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_CODE_LOOKUP_HIST set END_DATE_HIST = @curr_date where CODE_LOOKUP_ID in (select CODE_LOOKUP_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_CODE_LOOKUP_HIST ([CODE_LOOKUP_ID], [CODE_SET], [CODE_NAME], [CODE_VALUE_TEXT], [CODE_VALUE_NUM], [CODE_VALUE_FORMAT], [DISPLAY_ORDER], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], CODE_LOOKUP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CODE_LOOKUP_ID], [CODE_SET], [CODE_NAME], [CODE_VALUE_TEXT], [CODE_VALUE_NUM], [CODE_VALUE_FORMAT], [DISPLAY_ORDER], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_CODE_LOOKUP_H_ID_SEQ]) as [CODE_LOOKUP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_LOC_CODE_A_S_IUD_TR ON HMR_LOCATION_CODE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_LOCATION_CODE_HIST set END_DATE_HIST = @curr_date where LOCATION_CODE_ID in (select LOCATION_CODE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_LOCATION_CODE_HIST ([LOCATION_CODE_ID], [LOCATION_CODE], [REQUIRED_LOCATION_DETAILS], [ADDITIONAL_INFO], [REPORTING_FREQUENCY], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], LOCATION_CODE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [LOCATION_CODE_ID], [LOCATION_CODE], [REQUIRED_LOCATION_DETAILS], [ADDITIONAL_INFO], [REPORTING_FREQUENCY], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_LOCATION_CODE_H_ID_SEQ]) as [LOCATION_CODE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_PERM_A_S_IUD_TR ON HMR_PERMISSION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_PERMISSION_HIST set END_DATE_HIST = @curr_date where PERMISSION_ID in (select PERMISSION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_PERMISSION_HIST ([PERMISSION_ID], [NAME], [DESCRIPTION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], PERMISSION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERMISSION_ID], [NAME], [DESCRIPTION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_PERMISSION_H_ID_SEQ]) as [PERMISSION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_PRTY_A_S_IUD_TR ON HMR_PARTY FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_PARTY_HIST set END_DATE_HIST = @curr_date where PARTY_ID in (select PARTY_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_PARTY_HIST ([PARTY_ID], [BUSINESS_GUID], [BUSINESS_LEGAL_NAME], [DISPLAY_NAME], [EMAIL], [TELEPHONE], [BUSINESS_NUMBER], [PARTY_TYPE], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], PARTY_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PARTY_ID], [BUSINESS_GUID], [BUSINESS_LEGAL_NAME], [DISPLAY_NAME], [EMAIL], [TELEPHONE], [BUSINESS_NUMBER], [PARTY_TYPE], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_PARTY_H_ID_SEQ]) as [PARTY_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_RCKFL_RPT_A_S_IUD_TR ON HMR_ROCKFALL_REPORT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_ROCKFALL_REPORT_HIST set END_DATE_HIST = @curr_date where ROCKFALL_REPORT_ID in (select ROCKFALL_REPORT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_ROCKFALL_REPORT_HIST ([ROCKFALL_REPORT_ID], [SUBMISSION_OBJECT_ID], [VALIDATION_STATUS_ID], [MAJOR_INCIDENT_NUMBER], [ESTIMATED_ROCKFALL_DATE], [ESTIMATED_ROCKFALL_TIME], [START_LATITUDE], [START_LONGITUDE], [END_LATITUDE], [END_LONGITUDE], [HIGHWAY_UNIQUE_NUMBER], [HIGHWAY_UNIQUE_NAME], [LANDMARK], [LAND_MARK_NAME], [START_OFFSET], [END_OFFSET], [DIRECTION_FROM_LANDMARK], [LOCATION_DESCRIPTION], [DITCH_VOLUME], [TRAVELLED_LANES_VOLUME], [OTHER_VOLUME], [HEAVY_PRECIP], [FREEZE_THAW], [DITCH_SNOW_ICE], [VEHICLE_DAMAGE], [COMMENTS], [REPORTER_NAME], [MC_PHONE_NUMBER], [REPORT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], ROCKFALL_REPORT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROCKFALL_REPORT_ID], [SUBMISSION_OBJECT_ID], [VALIDATION_STATUS_ID], [MAJOR_INCIDENT_NUMBER], [ESTIMATED_ROCKFALL_DATE], [ESTIMATED_ROCKFALL_TIME], [START_LATITUDE], [START_LONGITUDE], [END_LATITUDE], [END_LONGITUDE], [HIGHWAY_UNIQUE_NUMBER], [HIGHWAY_UNIQUE_NAME], [LANDMARK], [LAND_MARK_NAME], [START_OFFSET], [END_OFFSET], [DIRECTION_FROM_LANDMARK], [LOCATION_DESCRIPTION], [DITCH_VOLUME], [TRAVELLED_LANES_VOLUME], [OTHER_VOLUME], [HEAVY_PRECIP], [FREEZE_THAW], [DITCH_SNOW_ICE], [VEHICLE_DAMAGE], [COMMENTS], [REPORTER_NAME], [MC_PHONE_NUMBER], [REPORT_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_ROCKFALL_REPORT_H_ID_SEQ]) as [ROCKFALL_REPORT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_RL_A_S_IUD_TR ON HMR_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_ROLE_HIST ([ROLE_ID], [NAME], [DESCRIPTION], [IS_INTERNAL], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [NAME], [DESCRIPTION], [IS_INTERNAL], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_ROLE_H_ID_SEQ]) as [ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_RL_PERM_A_S_IUD_TR ON HMR_ROLE_PERMISSION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_ROLE_PERMISSION_HIST set END_DATE_HIST = @curr_date where ROLE_PERMISSION_ID in (select ROLE_PERMISSION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_ROLE_PERMISSION_HIST ([ROLE_PERMISSION_ID], [ROLE_ID], [PERMISSION_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], ROLE_PERMISSION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_PERMISSION_ID], [ROLE_ID], [PERMISSION_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_ROLE_PERMISSION_H_ID_SEQ]) as [ROLE_PERMISSION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_SRV_ARA_A_S_IUD_TR ON HMR_SERVICE_AREA FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_SERVICE_AREA_HIST set END_DATE_HIST = @curr_date where SERVICE_AREA_NUMBER in (select SERVICE_AREA_NUMBER from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_SERVICE_AREA_HIST ([SERVICE_AREA_ID], [SERVICE_AREA_NUMBER], [SERVICE_AREA_NAME], [DISTRICT_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SERVICE_AREA_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SERVICE_AREA_ID], [SERVICE_AREA_NUMBER], [SERVICE_AREA_NAME], [DISTRICT_NUMBER], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_SERVICE_AREA_H_ID_SEQ]) as [SERVICE_AREA_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_SRV_ARA_USR_A_S_IUD_TR ON HMR_SERVICE_AREA_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_SERVICE_AREA_USER_HIST set END_DATE_HIST = @curr_date where SERVICE_AREA_USER_ID in (select SERVICE_AREA_USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_SERVICE_AREA_USER_HIST ([SERVICE_AREA_USER_ID], [SERVICE_AREA_NUMBER], [SYSTEM_USER_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SERVICE_AREA_USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SERVICE_AREA_USER_ID], [SERVICE_AREA_NUMBER], [SYSTEM_USER_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_SERVICE_AREA_USER_H_ID_SEQ]) as [SERVICE_AREA_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_STR_ELMT_A_S_IUD_TR ON HMR_STREAM_ELEMENT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_STREAM_ELEMENT_HIST set END_DATE_HIST = @curr_date where STREAM_ELEMENT_ID in (select STREAM_ELEMENT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_STREAM_ELEMENT_HIST ([STREAM_ELEMENT_ID], [SUBMISSION_STREAM_ID], [ELEMENT_NAME], [ELEMENT_TYPE], [STAGING_COLUMN_NAME], [IS_REQUIRED], [MAX_LENGTH], [MIN_LENGTH], [MAX_VALUE], [MIN_VALUE], [MAX_DATE], [MIN_DATE], [REG_EXP], [CODE_SET], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], STREAM_ELEMENT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [STREAM_ELEMENT_ID], [SUBMISSION_STREAM_ID], [ELEMENT_NAME], [ELEMENT_TYPE], [STAGING_COLUMN_NAME], [IS_REQUIRED], [MAX_LENGTH], [MIN_LENGTH], [MAX_VALUE], [MIN_VALUE], [MAX_DATE], [MIN_DATE], [REG_EXP], [CODE_SET], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_STREAM_ELEMENT_H_ID_SEQ]) as [STREAM_ELEMENT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_SUBM_RW_A_S_IUD_TR ON HMR_SUBMISSION_ROW FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_SUBMISSION_ROW_HIST set END_DATE_HIST = @curr_date where ROW_ID in (select ROW_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_SUBMISSION_ROW_HIST ([ROW_ID], [SUBMISSION_OBJECT_ID], [ROW_STATUS_ID], [RECORD_NUMBER], [ROW_VALUE], [ROW_HASH], [ERROR_DETAIL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SUBMISSION_ROW_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROW_ID], [SUBMISSION_OBJECT_ID], [ROW_STATUS_ID], [RECORD_NUMBER], [ROW_VALUE], [ROW_HASH], [ERROR_DETAIL], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_SUBMISSION_ROW_H_ID_SEQ]) as [SUBMISSION_ROW_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_SUBM_STR_A_S_IUD_TR ON HMR_SUBMISSION_STREAM FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_SUBMISSION_STREAM_HIST set END_DATE_HIST = @curr_date where SUBMISSION_STREAM_ID in (select SUBMISSION_STREAM_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_SUBMISSION_STREAM_HIST ([SUBMISSION_STREAM_ID], [STREAM_NAME], [END_DATE], [FILE_SIZE_LIMIT], [STAGING_TABLE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SUBMISSION_STREAM_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SUBMISSION_STREAM_ID], [STREAM_NAME], [END_DATE], [FILE_SIZE_LIMIT], [STAGING_TABLE_NAME], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_SUBMISSION_STREAM_H_ID_SEQ]) as [SUBMISSION_STREAM_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_SYS_USR_A_S_IUD_TR ON HMR_SYSTEM_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_SYSTEM_USER_HIST set END_DATE_HIST = @curr_date where SYSTEM_USER_ID in (select SYSTEM_USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_SYSTEM_USER_HIST ([SYSTEM_USER_ID], [PARTY_ID], [USER_GUID], [USERNAME], [USER_DIRECTORY], [USER_TYPE], [FIRST_NAME], [LAST_NAME], [EMAIL], [BUSINESS_GUID], [BUSINESS_LEGAL_NAME], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SYSTEM_USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SYSTEM_USER_ID], [PARTY_ID], [USER_GUID], [USERNAME], [USER_DIRECTORY], [USER_TYPE], [FIRST_NAME], [LAST_NAME], [EMAIL], [BUSINESS_GUID], [BUSINESS_LEGAL_NAME], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_SYSTEM_USER_H_ID_SEQ]) as [SYSTEM_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_USR_RL_A_S_IUD_TR ON HMR_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_USER_ROLE_HIST ([USER_ROLE_ID], [ROLE_ID], [SYSTEM_USER_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [ROLE_ID], [SYSTEM_USER_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_USER_ROLE_H_ID_SEQ]) as [USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_WLDLF_RPT_A_S_IUD_TR ON HMR_WILDLIFE_REPORT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_WILDLIFE_REPORT_HIST set END_DATE_HIST = @curr_date where WILDLIFE_RECORD_ID in (select WILDLIFE_RECORD_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_WILDLIFE_REPORT_HIST ([WILDLIFE_RECORD_ID], [SUBMISSION_OBJECT_ID], [VALIDATION_STATUS_ID], [RECORD_TYPE], [SERVICE_AREA], [ACCIDENT_DATE], [TIME_OF_KILL], [LATITUDE], [LONGITUDE], [HIGHWAY_UNIQUE_NUMBER], [LANDMARK], [START_OFFSET], [NEAREST_TOWN], [WILDLIFE_SIGN], [QUANTITY], [SPECIES], [SEX], [AGE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], WILDLIFE_REPORT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [WILDLIFE_RECORD_ID], [SUBMISSION_OBJECT_ID], [VALIDATION_STATUS_ID], [RECORD_TYPE], [SERVICE_AREA], [ACCIDENT_DATE], [TIME_OF_KILL], [LATITUDE], [LONGITUDE], [HIGHWAY_UNIQUE_NUMBER], [LANDMARK], [START_OFFSET], [NEAREST_TOWN], [WILDLIFE_SIGN], [QUANTITY], [SPECIES], [SEX], [AGE], [COMMENT], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_WILDLIFE_REPORT_H_ID_SEQ]) as [WILDLIFE_REPORT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go

CREATE TRIGGER HMR_WRK_RPT_A_S_IUD_TR ON HMR_WORK_REPORT FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_WORK_REPORT_HIST set END_DATE_HIST = @curr_date where WORK_REPORT_ID in (select WORK_REPORT_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_WORK_REPORT_HIST ([WORK_REPORT_ID], [SUBMISSION_OBJECT_ID], [VALIDATION_STATUS_ID], [RECORD_TYPE], [SERVICE_AREA], [RECORD_NUMBER], [TASK_NUMBER], [ACTIVITY_NUMBER], [START_DATE], [END_DATE], [ACCOMPLISHMENT], [UNIT_OF_MEASURE], [POSTED_DATE], [HIGHWAY_UNIQUE], [LANDMARK], [START_OFFSET], [END_OFFSET], [START_LATITUDE], [START_LONGITUDE], [END_LATITUDE], [END_LONGITUDE], [STRUCTURE_NUMBER], [SITE_NUMBER], [VALUE_OF_WORK ], [COMMENTS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], WORK_REPORT_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [WORK_REPORT_ID], [SUBMISSION_OBJECT_ID], [VALIDATION_STATUS_ID], [RECORD_TYPE], [SERVICE_AREA], [RECORD_NUMBER], [TASK_NUMBER], [ACTIVITY_NUMBER], [START_DATE], [END_DATE], [ACCOMPLISHMENT], [UNIT_OF_MEASURE], [POSTED_DATE], [HIGHWAY_UNIQUE], [LANDMARK], [START_OFFSET], [END_OFFSET], [START_LATITUDE], [START_LONGITUDE], [END_LATITUDE], [END_LONGITUDE], [STRUCTURE_NUMBER], [SITE_NUMBER], [VALUE_OF_WORK ], [COMMENTS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_WORK_REPORT_H_ID_SEQ]) as [WORK_REPORT_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
go














